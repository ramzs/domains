/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$arrow-down-name: 'arrow-down'
$arrow-down-x: 37px
$arrow-down-y: 14px
$arrow-down-offset-x: -37px
$arrow-down-offset-y: -14px
$arrow-down-width: 12px
$arrow-down-height: 7px
$arrow-down-total-width: 51px
$arrow-down-total-height: 39px
$arrow-down-image: '../img/sprite.png'
$arrow-down: (37px, 14px, -37px, -14px, 12px, 7px, 51px, 39px, '../img/sprite.png', 'arrow-down', )
$arrow-right-name: 'arrow-right'
$arrow-right-x: 0px
$arrow-right-y: 0px
$arrow-right-offset-x: 0px
$arrow-right-offset-y: 0px
$arrow-right-width: 25px
$arrow-right-height: 18px
$arrow-right-total-width: 51px
$arrow-right-total-height: 39px
$arrow-right-image: '../img/sprite.png'
$arrow-right: (0px, 0px, 0px, 0px, 25px, 18px, 51px, 39px, '../img/sprite.png', 'arrow-right', )
$fb-name: 'fb'
$fb-x: 25px
$fb-y: 14px
$fb-offset-x: -25px
$fb-offset-y: -14px
$fb-width: 12px
$fb-height: 21px
$fb-total-width: 51px
$fb-total-height: 39px
$fb-image: '../img/sprite.png'
$fb: (25px, 14px, -25px, -14px, 12px, 21px, 51px, 39px, '../img/sprite.png', 'fb', )
$inst-name: 'inst'
$inst-x: 0px
$inst-y: 18px
$inst-offset-x: 0px
$inst-offset-y: -18px
$inst-width: 21px
$inst-height: 21px
$inst-total-width: 51px
$inst-total-height: 39px
$inst-image: '../img/sprite.png'
$inst: (0px, 18px, 0px, -18px, 21px, 21px, 51px, 39px, '../img/sprite.png', 'inst', )
$vk-name: 'vk'
$vk-x: 25px
$vk-y: 0px
$vk-offset-x: -25px
$vk-offset-y: 0px
$vk-width: 26px
$vk-height: 14px
$vk-total-width: 51px
$vk-total-height: 39px
$vk-image: '../img/sprite.png'
$vk: (25px, 0px, -25px, 0px, 26px, 14px, 51px, 39px, '../img/sprite.png', 'vk', )
$spritesheet-width: 51px
$spritesheet-height: 39px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($arrow-down, $arrow-right, $fb, $inst, $vk, )
$spritesheet: (51px, 39px, '../img/sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
