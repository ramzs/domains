// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$arrow-left-name: 'arrow-left'
$arrow-left-x: 0px
$arrow-left-y: 0px
$arrow-left-offset-x: 0px
$arrow-left-offset-y: 0px
$arrow-left-width: 26px
$arrow-left-height: 72px
$arrow-left-total-width: 127px
$arrow-left-total-height: 72px
$arrow-left-image: '../img/sprite.png'
$arrow-left: (0px, 0px, 0px, 0px, 26px, 72px, 127px, 72px, '../img/sprite.png', 'arrow-left', )
$arrow-right-name: 'arrow-right'
$arrow-right-x: 26px
$arrow-right-y: 0px
$arrow-right-offset-x: -26px
$arrow-right-offset-y: 0px
$arrow-right-width: 26px
$arrow-right-height: 72px
$arrow-right-total-width: 127px
$arrow-right-total-height: 72px
$arrow-right-image: '../img/sprite.png'
$arrow-right: (26px, 0px, -26px, 0px, 26px, 72px, 127px, 72px, '../img/sprite.png', 'arrow-right', )
$loc-name: 'loc'
$loc-x: 52px
$loc-y: 0px
$loc-offset-x: -52px
$loc-offset-y: 0px
$loc-width: 39px
$loc-height: 37px
$loc-total-width: 127px
$loc-total-height: 72px
$loc-image: '../img/sprite.png'
$loc: (52px, 0px, -52px, 0px, 39px, 37px, 127px, 72px, '../img/sprite.png', 'loc', )
$mail-name: 'mail'
$mail-x: 52px
$mail-y: 37px
$mail-offset-x: -52px
$mail-offset-y: -37px
$mail-width: 37px
$mail-height: 27px
$mail-total-width: 127px
$mail-total-height: 72px
$mail-image: '../img/sprite.png'
$mail: (52px, 37px, -52px, -37px, 37px, 27px, 127px, 72px, '../img/sprite.png', 'mail', )
$phone-name: 'phone'
$phone-x: 91px
$phone-y: 0px
$phone-offset-x: -91px
$phone-offset-y: 0px
$phone-width: 36px
$phone-height: 36px
$phone-total-width: 127px
$phone-total-height: 72px
$phone-image: '../img/sprite.png'
$phone: (91px, 0px, -91px, 0px, 36px, 36px, 127px, 72px, '../img/sprite.png', 'phone', )
$spritesheet-width: 127px
$spritesheet-height: 72px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($arrow-left, $arrow-right, $loc, $mail, $phone, )
$spritesheet: (127px, 72px, '../img/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
